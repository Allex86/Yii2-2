
Warning: PHP Startup: Unable to load dynamic library 'bz2' (tried: \xampp\php\ext\bz2 (Не найден указанный модуль.
), \xampp\php\ext\php_bz2.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: PHP Startup: Unable to load dynamic library 'curl' (tried: \xampp\php\ext\curl (Не найден указанный модуль.
), \xampp\php\ext\php_curl.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: PHP Startup: Unable to load dynamic library 'fileinfo' (tried: \xampp\php\ext\fileinfo (Не найден указанный модуль.
), \xampp\php\ext\php_fileinfo.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: PHP Startup: Unable to load dynamic library 'gd2' (tried: \xampp\php\ext\gd2 (Не найден указанный модуль.
), \xampp\php\ext\php_gd2.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: PHP Startup: Unable to load dynamic library 'gettext' (tried: \xampp\php\ext\gettext (Не найден указанный модуль.
), \xampp\php\ext\php_gettext.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: PHP Startup: Unable to load dynamic library 'mbstring' (tried: \xampp\php\ext\mbstring (Не найден указанный модуль.
), \xampp\php\ext\php_mbstring.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: PHP Startup: Unable to load dynamic library 'exif' (tried: \xampp\php\ext\exif (Не найден указанный модуль.
), \xampp\php\ext\php_exif.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: PHP Startup: Unable to load dynamic library 'mysqli' (tried: \xampp\php\ext\mysqli (Не найден указанный модуль.
), \xampp\php\ext\php_mysqli.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: PHP Startup: Unable to load dynamic library 'pdo_mysql' (tried: \xampp\php\ext\pdo_mysql (Не найден указанный модуль.
), \xampp\php\ext\php_pdo_mysql.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: PHP Startup: Unable to load dynamic library 'pdo_sqlite' (tried: \xampp\php\ext\pdo_sqlite (Не найден указанный модуль.
), \xampp\php\ext\php_pdo_sqlite.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: PHP Startup: Unable to load dynamic library 'php_openssl.dll' (tried: \xampp\php\ext\php_openssl.dll (Не найден указанный модуль.
), \xampp\php\ext\php_php_openssl.dll.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: PHP Startup: Unable to load dynamic library 'php_ftp.dll' (tried: \xampp\php\ext\php_ftp.dll (Не найден указанный модуль.
), \xampp\php\ext\php_php_ftp.dll.dll (Не найден указанный модуль.
)) in Unknown on line 0

Warning: Cannot open '\xampp\php\extras\browscap.ini' for reading in Unknown on line 0

Deprecated: The each() function is deprecated. This message will be suppressed on further calls in C:\Users\РђlleX\AppData\Roaming\Sublime Text 3\Packages\PHPTools\php.tools\codeFormatter.php on line 54
<?php

namespace frontend\controllers;

use common\models\search\UserSearch;
use common\models\User;
use Yii;
use yii\filters\VerbFilter;
use yii\web\Controller;
use yii\web\NotFoundHttpException;

/**
 * UserController implements the CRUD actions for User model.
 */

class UserController extends Controller {
	/**
	 * {@inheritdoc}
	 */
	public function behaviors() {
		return [
			'access' => [
				'class' => \yii\filters\AccessControl::className(),
				'rules' => [
					[
						'allow' => true,
						'roles' => ['@'],
					],
				],
			],
			'verbs'    => [
				'class'   => VerbFilter::className(),
				'actions' => [
					'delete' => ['POST'],
				],
			],
		];
	}

	/**
	 * Lists all User models.
	 * @return mixed
	 */
	public function actionIndex() {
		$searchModel  = new UserSearch();
		$dataProvider = $searchModel->search(Yii::$app->request->queryParams);

		return $this->render('index', [
				'searchModel'  => $searchModel,
				'dataProvider' => $dataProvider,
			]);
	}

	/**
	 * Displays a single User model.
	 * @param integer $id
	 * @return mixed
	 * @throws NotFoundHttpException if the model cannot be found
	 */
	public function actionView($id) {
		return $this->render('view', [
				'model' => $this->findModel($id),
			]);
	}

	/**
	 * Updates an existing User model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 * @param integer $id
	 * @return mixed
	 * @throws NotFoundHttpException if the model cannot be found
	 */
	public function actionProfile() {
		$model = $this->findModel(Yii::$app->user->id);

		if ($model->load(Yii::$app->request->post()) && $model->save()) {
			return $this->redirect(['view', 'id' => $model->id]);
		}

		return $this->render('update', [
				'model' => $model,
			]);
	}

	//    /**
	//     * Creates a new User model.
	//     * If creation is successful, the browser will be redirected to the 'view' page.
	//     * @return mixed
	//     */
	//    public function actionCreate()
	//    {
	//        $model = new User();
	//
	//        if ($model->load(Yii::$app->request->post()) && $model->save()) {
	//            return $this->redirect(['view', 'id' => $model->id]);
	//        }
	//
	//        return $this->render('create', [
	//            'model' => $model,
	//        ]);
	//    }
	//
	//    /**
	//     * Updates an existing User model.
	//     * If update is successful, the browser will be redirected to the 'view' page.
	//     * @param integer $id
	//     * @return mixed
	//     * @throws NotFoundHttpException if the model cannot be found
	//     */
	//    public function actionUpdate($id)
	//    {
	//        $model = $this->findModel($id);
	//
	//        if ($model->load(Yii::$app->request->post()) && $model->save()) {
	//            return $this->redirect(['view', 'id' => $model->id]);
	//        }
	//
	//        return $this->render('update', [
	//            'model' => $model,
	//        ]);
	//    }
	//
	//    /**
	//     * Deletes an existing User model.
	//     * If deletion is successful, the browser will be redirected to the 'index' page.
	//     * @param integer $id
	//     * @return mixed
	//     * @throws NotFoundHttpException if the model cannot be found
	//     */
	//    public function actionDelete($id)
	//    {
	//        $this->findModel($id)->delete();
	//
	//        return $this->redirect(['index']);
	//    }

	/**
	 * Finds the User model based on its primary key value.
	 * If the model is not found, a 404 HTTP exception will be thrown.
	 * @param integer $id
	 * @return User the loaded model
	 * @throws NotFoundHttpException if the model cannot be found
	 */
	protected function findModel($id) {
		if (($model = User::findOne($id)) !== null) {
			return $model;
		}

		throw new NotFoundHttpException('The requested page does not exist.');
	}
}
